{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["usePercent","initialFormatted","initialVal","useState","formattedValue","floatValue","money","setMoney","to","num","Number","replace","isNaN","useMoney","App","cpc","setCPC","conversionRate","setConversionRate","manualCAC","setManualCAC","initialMoney","setInitialMoney","period","setPeriod","reinvestmentRatio","setReinvestmentRatio","arpc","setArpc","costPerCustomer","setCostPerCustomer","fixedMonthlyCost","setFixedMonthlyCost","churnRate","setChurnRate","cac","toFixed","currentPeriod","currentMoney","customers","revenuePerPeriod","adSpendPerPeriod","currentMoneyPerPeriod","push","adSpend","Math","ceil","revenue","floor","className","href","data","y","type","mode","marker","color","name","layout","title","width","xaxis","zeroline","yaxis","tickformat","hoverformat","autosize","useResizeHandler","config","displayModeBar","responsive","style","height","src","alt","value","displayType","prefix","thousandSeparator","decimalScale","fixedDecimalScale","placeholder","onChange","e","target","suffix","htmlFor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.04f3b518.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport NumberFormat from 'react-number-format';\nimport Plot from 'react-plotly.js'\n\ninterface Money {\n  formattedValue: string;\n  floatValue: number | null;\n}\n\nconst usePercent = (initialFormatted: string = '', initialVal: number | null = null): [Money, (to: string) => void] => {\n  const [money, setMoney] = useState({\n    formattedValue: initialFormatted,\n    floatValue: initialVal\n  })\n\n  return [money, (to: string): void => {\n    const num = Number(to.replace('%', ''))\n\n    if (isNaN(num)) {\n      setMoney({\n        formattedValue: to,\n        floatValue: null\n      })\n    } else {\n      setMoney({\n        formattedValue: to,\n        floatValue: num\n      })\n    }\n  }]\n}\n\nconst useMoney = (initialFormatted: string = '', initialVal: number | null = null): [Money, (to: string) => void] => {\n  const [money, setMoney] = useState({\n    formattedValue: initialFormatted,\n    floatValue: initialVal\n  })\n\n  return [money, (to: string): void => {\n    const num = Number(to.replace('$', ''))\n\n    if (isNaN(num)) {\n      setMoney({\n        formattedValue: to,\n        floatValue: null\n      })\n    } else {\n      setMoney({\n        formattedValue: to,\n        floatValue: num\n      })\n    }\n  }]\n}\n\nconst App: React.FC = () => {\n\n  const [cpc, setCPC] = useMoney()\n  const [conversionRate, setConversionRate] = usePercent()\n  const [manualCAC, setManualCAC] = useMoney('$50.00', 50)\n  const [initialMoney, setInitialMoney] = useMoney('$1000.00', 1000)\n  const [period, setPeriod] = useState(12)\n  const [reinvestmentRatio, setReinvestmentRatio] = usePercent('50%', 50)\n  const [arpc, setArpc] = useMoney('$29.00', 29)\n  const [costPerCustomer, setCostPerCustomer] = useMoney('$5.00', 5)\n  const [fixedMonthlyCost, setFixedMonthlyCost] = useMoney('$20.00', 20)\n  const [churnRate, setChurnRate] = usePercent('5%', 5)\n\n  let cac = {\n    formattedValue: '',\n    floatValue: null as number | null\n  }\n  if (cpc.floatValue && conversionRate.floatValue) {\n    cac.floatValue = (Number(cpc.floatValue) / (Number(conversionRate.floatValue) / 100))\n    cac.formattedValue = '$' + (Number(cpc.floatValue) / (Number(conversionRate.floatValue) / 100)).toFixed(2)\n  } else if (manualCAC.floatValue) {\n    cac = manualCAC\n  }\n\n  const updateCPC = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setManualCAC('')\n    setCPC(e.target.value)\n  }\n\n  const updateCR = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setManualCAC('')\n    setConversionRate(e.target.value)\n  }\n\n  const updateManualCAC = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setConversionRate('')\n    setCPC('')\n    setManualCAC(e.target.value)\n  }\n\n  let currentPeriod = 0\n  let currentMoney = 0\n  let customers = 0\n\n  const revenuePerPeriod = []\n  const adSpendPerPeriod = []\n  const currentMoneyPerPeriod = []\n\n  if (cac.floatValue && initialMoney.floatValue && reinvestmentRatio.floatValue && churnRate.floatValue && arpc.floatValue && costPerCustomer.floatValue && fixedMonthlyCost.floatValue !== null) {\n    currentMoney = initialMoney.floatValue\n    while (currentPeriod < period) {\n      currentMoneyPerPeriod.push(currentMoney)\n      const adSpend = currentMoney * (reinvestmentRatio.floatValue / 100)\n      adSpendPerPeriod.push(adSpend)\n      customers -= Math.ceil((churnRate.floatValue / 100) * customers)\n      currentMoney -= adSpend\n      customers += Math.floor(adSpend / cac.floatValue)\n\n      const revenue = customers * arpc.floatValue\n      revenuePerPeriod.push(revenue)\n      currentMoney += revenue\n      currentMoney -= costPerCustomer.floatValue * customers\n      currentMoney -= fixedMonthlyCost.floatValue\n\n      currentPeriod++\n    }\n  }\n\n  return (\n    <div className='bg-near-white pb4'>\n      <div className='mh0-ns mh3'>\n        <div className='center mw7'>\n          <div className='f1 tc pt3 b'>SaaS Growth Calculator</div>\n          <div className='f5 tc mt3 mb3'>Calculate SaaS growth as a function of common metrics.</div>\n          <div className='f5 tc mt3 mb3'>Built by <a href='https://twitter.com/meyer9_'>@meyer9_</a></div>\n          <div className='relative'>\n            <Plot\n              data={[\n                {\n                  y: revenuePerPeriod,\n                  type: 'scatter',\n                  mode: 'lines+markers',\n                  marker: {color: 'red'},\n                  name: 'MRR'\n                },\n                {\n                  y: adSpendPerPeriod,\n                  type: 'scatter',\n                  mode: 'lines+markers',\n                  marker: {color: 'blue'},\n                  name: 'Marketing Spend'\n                },\n                {\n                  y: currentMoneyPerPeriod,\n                  type: 'scatter',\n                  mode: 'lines+markers',\n                  marker: {color: 'green'},\n                  name: 'Current Money',\n                },\n              ]}\n              layout={ {\n                title: 'Growth',\n                width: 768,\n                xaxis: {\n                  title: 'Month',\n                  zeroline: false\n                },\n                yaxis: {\n                  title: 'Cash ($)',\n                  zeroline: false,\n                  tickformat: '$.2f',\n                  hoverformat: '$.2f'\n                },\n                autosize: true,\n              } }\n              useResizeHandler\n              config={ {displayModeBar: false, responsive: true } }\n              style={ {width: '100%', height: '100%'}}\n            />\n          </div>\n          <div className='pa4 bg-white mt3 mb3 flex lh-copy items-center'>\n            <img src='https://pagecheck.app/android-chrome-512x512.png' width='72px' height='72px' className='br3 mr3' alt='pagecheck logo' />\n            <div className='flex-grow-1'>\n              <div className='f4'>Sponsored by <a className='blue' href='https://pagecheck.app'>page<strong>check</strong></a>.</div>\n              <div>Convert more users by ensuring pages load fast. pagecheck monitors your website and alerts you of performance or security regressions.</div>\n            </div>\n          </div>\n          <div className='w-100 bg-white br3 pa4 mt4 lh-copy'>\n            { cac.floatValue && initialMoney.floatValue && reinvestmentRatio.floatValue && churnRate.floatValue && arpc.floatValue && costPerCustomer.floatValue &&  fixedMonthlyCost.floatValue !== null ?\n              <div>In <strong>{period} months</strong>, we expect you'll have <strong>{customers} customers</strong> at <strong><NumberFormat value={arpc.floatValue} displayType='text' prefix='$' thousandSeparator=',' /></strong> each for an MRR of <strong><NumberFormat value={customers * arpc.floatValue} displayType='text' prefix='$' thousandSeparator=',' /></strong> and ARR of <strong><NumberFormat value={customers * arpc.floatValue * 12} displayType='text' prefix='$' thousandSeparator=',' /></strong>.</div>\n              : <div>Missing parameters</div> }\n          </div>\n          <div className='w-100 bg-white br3 pa4 mt4'>\n            <div className='blue b mb3'>Parameters</div>\n            <div className='ml3'>\n              <div className='mb3 db'>\n                <div className='mb1'>Initial Investment</div>\n                <NumberFormat\n                  displayType='input'\n                  prefix='$'\n                  decimalScale={2}\n                  fixedDecimalScale\n                  placeholder='Initial Investment'\n                  className='w-100'\n                  value={initialMoney.formattedValue}\n                  onChange={(e) => setInitialMoney(e.target.value)} />\n              </div>\n              <div className='mb3 db'>\n                <div className='mb1'>Period (months)</div>\n                <NumberFormat\n                  displayType='input'\n                  placeholder='Period (months)'\n                  className='w-100'\n                  value={period}\n                  onChange={(e) => setPeriod(Number(e.target.value))} />\n              </div>\n              <div className='mb3 db'>\n                <div className='mb1'>Reinvestment Ratio</div>\n                <NumberFormat\n                  displayType='input'\n                  suffix='%'\n                  placeholder='Reinvestment Ratio'\n                  className='w-100'\n                  value={reinvestmentRatio.formattedValue}\n                  onChange={(e) => setReinvestmentRatio(e.target.value)} />\n              </div>\n            </div>\n            <div className='blue b'>Customer Acquisition</div>\n            <div className='ml3'>\n              <p>Either enter the cost-per-click and the conversion rate or just the customer acquisition cost.</p>\n              <label htmlFor='cost-per-click' className='mb3 db'>\n                <div className='mb1'>Cost Per Click (how much does it cost to get users to click on your link):</div>\n                <NumberFormat\n                  displayType='input'\n                  prefix='$'\n                  decimalScale={2}\n                  fixedDecimalScale\n                  placeholder='Cost Per Click'\n                  name='cost-per-click'\n                  className='w-100'\n                  value={cpc.formattedValue}\n                  onChange={updateCPC} />\n              </label>\n              <label htmlFor='conversion-rate' className='mb3 db'>\n                <div className='mb1'>Conversion Rate (how many users who click on your link sign up):</div>\n                <NumberFormat\n                  displayType='input'\n                  suffix='%'\n                  placeholder='Conversion Rate'\n                  name='conversion-rate'\n                  className='w-100'\n                  value={conversionRate.formattedValue}\n                  onChange={updateCR} />\n              </label>\n              <div className='ma4 tc'>OR</div>\n              <label htmlFor='cac' className='mb3 db'>\n                <div className='mb1'>Customer Acquisition Cost (how much does it cost to acquire a customer):</div>\n                <NumberFormat\n                  displayType='input'\n                  prefix='$'\n                  placeholder='Customer Acquisition Cost'\n                  name='cac'\n                  decimalScale={2}\n                  fixedDecimalScale\n                  className='w-100'\n                  value={cac.formattedValue}\n                  onChange={updateManualCAC} />\n              </label>\n            </div>\n            <div className='blue b mb3'>Customer Value</div>\n            <div className='ml3'>\n              <div className='mb3 db'>\n                <div className='mb1'>Average Monthly Revenue per Customer:</div>\n                <NumberFormat\n                  displayType='input'\n                  prefix='$'\n                  decimalScale={2}\n                  fixedDecimalScale\n                  placeholder='Average Monthly Revenue per Customer'\n                  className='w-100'\n                  value={arpc.formattedValue}\n                  onChange={(e) => setArpc(e.target.value)} />\n              </div>\n              <div className='mb3 db'>\n                <div className='mb1'>Cost Per Customer:</div>\n                <NumberFormat\n                  displayType='input'\n                  prefix='$'\n                  decimalScale={2}\n                  fixedDecimalScale\n                  placeholder='Cost Per Customer'\n                  className='w-100'\n                  value={costPerCustomer.formattedValue}\n                  onChange={(e) => setCostPerCustomer(e.target.value)} />\n              </div>\n              <div className='mb3 db'>\n                <div className='mb1'>Fixed Monthly Cost:</div>\n                <NumberFormat\n                  displayType='input'\n                  prefix='$'\n                  decimalScale={2}\n                  fixedDecimalScale\n                  placeholder='Fixed Monthly Cost'\n                  className='w-100'\n                  value={fixedMonthlyCost.formattedValue}\n                  onChange={(e) => setFixedMonthlyCost(e.target.value)} />\n              </div>\n              <div className='mb3 db'>\n                <div className='mb1'>Churn Rate:</div>\n                <NumberFormat\n                  displayType='input'\n                  suffix='%'\n                  placeholder='Churn Rate'\n                  className='w-100'\n                  value={churnRate.formattedValue}\n                  onChange={(e) => setChurnRate(e.target.value)} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}